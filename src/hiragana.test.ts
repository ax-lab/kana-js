import { to_hiragana } from './hiragana'
import * as testkana from './testkana'
import { describe, expect, test } from './testutil'

describe('to_hiragana', () => {
	test('should accept empty string', () => {
		expect(to_hiragana('')).toEqual('')
	})

	test('should convert manual cases', () => {
		// spell-checker: disable

		const check = (input: string, expected: string) => {
			const pre = `${input} = `
			expect(pre + to_hiragana(input)).toEqual(pre + expected)
		}

		check('quaqqua', '„Åè„ÅÅ„Å£„Åè„ÅÅ')

		// spell-checker: enable
	})

	test('should convert from common katakana', () => {
		const IN =
			'„Ç¢„Ç§„Ç¶„Ç®„Ç™ „Ç´„Ç≠„ÇØ„Ç±„Ç≥ „Ç¨„ÇÆ„Ç∞„Ç≤„Ç¥ „Çµ„Ç∑„Çπ„Çª„ÇΩ „Ç∂„Ç∏„Ç∫„Çº„Çæ „Çø„ÉÅ„ÉÑ„ÉÜ„Éà „ÉÄ„ÉÇ„ÉÖ„Éá„Éâ „Éä„Éã„Éå„Éç„Éé „Éè„Éí„Éï„Éò„Éõ „Éê„Éì„Éñ„Éô„Éú „Éë„Éî„Éó„Éö„Éù „Éû„Éü„É†„É°„É¢ „É§„É¶„É® „É©„É™„É´„É¨„É≠ „ÉØ„É∞„É±„É≤„É≥'
		const TO =
			'„ÅÇ„ÅÑ„ÅÜ„Åà„Åä„ÄÄ„Åã„Åç„Åè„Åë„Åì„ÄÄ„Åå„Åé„Åê„Åí„Åî„ÄÄ„Åï„Åó„Åô„Åõ„Åù„ÄÄ„Åñ„Åò„Åö„Åú„Åû„ÄÄ„Åü„Å°„Å§„Å¶„Å®„ÄÄ„Å†„Å¢„Å•„Åß„Å©„ÄÄ„Å™„Å´„Å¨„Å≠„ÅÆ„ÄÄ„ÅØ„Å≤„Åµ„Å∏„Åª„ÄÄ„Å∞„Å≥„Å∂„Åπ„Åº„ÄÄ„Å±„Å¥„Å∑„Å∫„ÅΩ„ÄÄ„Åæ„Åø„ÇÄ„ÇÅ„ÇÇ„ÄÄ„ÇÑ„ÇÜ„Çà„ÄÄ„Çâ„Çä„Çã„Çå„Çç„ÄÄ„Çè„Çê„Çë„Çí„Çì'
		expect(to_hiragana(IN)).toEqual(TO)
	})

	test('should convert from small katakana', () => {
		const IN = '„Ç°„Ç£„Ç•„Çß„Ç©„ÉÉ„É£„É•„Éß„ÉÆ„Éµ„É∂'
		const TO = '„ÅÅ„ÅÉ„ÅÖ„Åá„Åâ„Å£„ÇÉ„ÇÖ„Çá„Çé„Çï„Çñ'
		expect(to_hiragana(IN)).toEqual(TO)
	})

	test('should convert from rare katakana', () => {
		const IN = '„É¥„ÉΩ„Éæ„ÉøõÄÄ„É∑„É∏„Éπ„É∫'
		const TO = `„Çî„Çù„Çû„Åì„Å®„Åà„Çè\u{3099}„Çê\u{3099}„Çë\u{3099}„Çí\u{3099}`
		expect(to_hiragana(IN)).toEqual(TO)
	})

	test('should convert from rare small katakana', () => {
		const IN = '„á∞„á±„á≤„á≥„á¥„áµ„á∂„á∑„á∏„áπ„á∫„áª„áº„áΩ„áæ„áø'
		const TO = '„Åè„Åó„Åô„Å®„Å¨„ÅØ„Å≤„Åµ„Å∏„Åª„ÇÄ„Çâ„Çä„Çã„Çå„Çç'
		expect(to_hiragana(IN)).toEqual(TO)
	})

	test('should support combining marks', () => {
		const B = '\u{3099}' // Combining Katakana-Hiragana Voiced Sound Mark
		const P = '\u{309A}' // Combining Katakana-Hiragana Semi-Voiced Sound Mark
		const IN = `„Éè${B}„Éí${B}„Éï${B}„Éò${B}„Éõ${B} „Éè${P}„Éí${P}„Éï${P}„Éò${P}„Éõ${P}`
		const TO = '„Å∞„Å≥„Å∂„Åπ„Åº„ÄÄ„Å±„Å¥„Å∑„Å∫„ÅΩ'
		expect(to_hiragana(IN)).toEqual(TO)
	})

	test('should convert from katakana', () => {
		const check = (katakana: string, expected: string) => {
			const pre = `${katakana} = `
			expect(pre + to_hiragana(katakana)).toEqual(pre + expected)
		}

		for (const it of testkana.BASIC_KANA) {
			if (it.hiragana_only) {
				continue
			}
			const expected = it.h
			const katakana = it.k
			check(katakana, expected)
		}
	})

	test('should convert from romaji', () => {
		const check = (romaji: string, expected: string) => {
			const pre = `${romaji} = `
			expect(pre + to_hiragana(romaji)).toEqual(pre + expected)
		}

		for (const it of testkana.BASIC_KANA) {
			const expected = it.h
			for (const romaji of testkana.romaji_inputs(it)) {
				check(romaji, expected)
				check(romaji.toLowerCase(), expected)
				check(romaji.toUpperCase(), expected)
			}
		}
	})

	test('should convert romaji double consonants', () => {
		const check = (romaji: string, expected: string) => {
			const pre = `${romaji} = `
			expect(pre + to_hiragana(romaji)).toEqual(pre + expected)
		}

		for (const it of testkana.DOUBLE_CONSONANTS) {
			const expected = it.h
			for (const romaji of testkana.romaji_inputs(it)) {
				check(romaji, expected)
				check(romaji.toLowerCase(), expected)
				check(romaji.toUpperCase(), expected)
			}
		}
	})

	test('should convert romaji long vowels', () => {
		const check = (romaji: string, expected: string) => {
			const pre = `${romaji} = `
			expect(pre + to_hiragana(romaji)).toEqual(pre + expected)
		}

		for (const it of testkana.LONG_VOWELS) {
			const expected = it.h
			for (const romaji of testkana.romaji_inputs(it)) {
				check(romaji, expected)
				check(romaji.toLowerCase(), expected)
				check(romaji.toUpperCase(), expected)
			}
		}
	})

	test('should convert long double vowel sequences', () => {
		// spell-checker: disable
		expect(to_hiragana('akkkkkkkkkkka')).toEqual('„ÅÇ„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Åã')
		expect(to_hiragana('akkkkkkkkkka')).toEqual('„ÅÇ„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Åã')
		expect(to_hiragana('akkkkkkkkka')).toEqual('„ÅÇ„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Åã')
		expect(to_hiragana('akkkkkkkka')).toEqual('„ÅÇ„Å£„Å£„Å£„Å£„Å£„Å£„Å£„Åã')
		expect(to_hiragana('akkkkkkka')).toEqual('„ÅÇ„Å£„Å£„Å£„Å£„Å£„Å£„Åã')
		expect(to_hiragana('akkkkkka')).toEqual('„ÅÇ„Å£„Å£„Å£„Å£„Å£„Åã')
		expect(to_hiragana('akkkkka')).toEqual('„ÅÇ„Å£„Å£„Å£„Å£„Åã')
		expect(to_hiragana('akkkka')).toEqual('„ÅÇ„Å£„Å£„Å£„Åã')
		expect(to_hiragana('akkka')).toEqual('„ÅÇ„Å£„Å£„Åã')
		expect(to_hiragana('akka')).toEqual('„ÅÇ„Å£„Åã')
		// spell-checker: enable
	})

	// Reverse from the romaji tests.
	test('should convert from ambiguous romaji', () => {
		// spell-checker: disable

		// nn sequences
		expect(to_hiragana(`n'na`)).toEqual('„Çì„Å™')
		expect(to_hiragana(`N'NA`)).toEqual('„Çì„Å™')

		// ny sequences
		expect(to_hiragana(`n'ya`)).toEqual('„Çì„ÇÑ')
		expect(to_hiragana(`N'YA`)).toEqual('„Çì„ÇÑ')

		// n + vowel sequences
		expect(to_hiragana(`n'a`)).toEqual('„Çì„ÅÇ')
		expect(to_hiragana(`n'e`)).toEqual('„Çì„Åà')
		expect(to_hiragana(`n'i`)).toEqual('„Çì„ÅÑ')
		expect(to_hiragana(`n'o`)).toEqual('„Çì„Åä')
		expect(to_hiragana(`n'u`)).toEqual('„Çì„ÅÜ')

		expect(to_hiragana(`N'A`)).toEqual('„Çì„ÅÇ')
		expect(to_hiragana(`N'E`)).toEqual('„Çì„Åà')
		expect(to_hiragana(`N'I`)).toEqual('„Çì„ÅÑ')
		expect(to_hiragana(`N'O`)).toEqual('„Çì„Åä')
		expect(to_hiragana(`N'U`)).toEqual('„Çì„ÅÜ')

		// spell-checker: enable
	})
})
